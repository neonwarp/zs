name: Test and Release

on:
  workflow_dispatch:
  push:
    paths:
      - zig.zon
      - src/**
      - build.zig
    branches:
      - main

jobs:
  test-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      BINARY_NAME: zs

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.15.2

      - name: Run Zig tests
        run: zig test src/main.zig

      - name: Get previous zig.zon version
        id: old_version
        run: |
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            git show HEAD^:zig.zon | grep 'version' | head -1 | sed 's/.*"\(.*\)".*/\1/' > old_version.txt
          else
            echo "0.0.0" > old_version.txt
          fi
          echo "OLD_VERSION=$(cat old_version.txt)" >> $GITHUB_ENV

      - name: Get new zig.zon version
        id: new_version
        run: |
          grep 'version' zig.zon | head -1 | sed 's/.*"\(.*\)".*/\1/' > new_version.txt
          echo "NEW_VERSION=$(cat new_version.txt)" >> $GITHUB_ENV

      - name: Check if version changed
        run: |
          if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
            echo "Version did not change. Skipping release."
            echo "RELEASE=false" >> $GITHUB_ENV
          else
            echo "Version changed: $OLD_VERSION -> $NEW_VERSION"
            echo "RELEASE=true" >> $GITHUB_ENV
          fi

      - name: Build (windows x86_64)
        if: ${{ env.RELEASE == 'true' }}
        run: zig build -Dtarget=x86_64-windows-gnu -Doptimize=ReleaseFast --prefix zig-out-windows

      - name: Prepare release assets
        if: ${{ env.RELEASE == 'true' }}
        run: |
          set -e

          mkdir -p dist

          if [ -f "zig-out-windows/bin/$BINARY_NAME.exe" ]; then
            cp zig-out-windows/bin/$BINARY_NAME.exe dist/${BINARY_NAME}-windows-x86_64.exe
          fi

          (cd dist && for f in *; do sha256sum "$f" > "$f".sha256; done)
          echo "Assets prepared:"
          ls -l dist

      - name: Create GitHub Release
        if: ${{ env.RELEASE == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: v${{ env.NEW_VERSION }}
          body: |
            Automated release for version v${{ env.NEW_VERSION }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
